version: '3.9'
volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  mongo:
    restart: always
    volumes:
      - ./data/mongo:/data/db
    ports:
      - 27017:27017
    depends_on:
      - mongo1
      - mongo2
    entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'dbrs']
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u mongo -p mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s

  mongo1:
    restart: always
    volumes:
      - ./data/mongo1:/data/db
    ports:
      - 27018:27017
    entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'dbrs']
  mongo2:
    restart: always
    volumes:
      - ./data/mongo2:/data/db
    ports:
      - 27019:27017
    entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'dbrs']
  mongoinit:
    image: mongo:latest
    # this container will exit after executing the command
    restart: 'no'
    depends_on:
      - mongo
    command: >
      mongo --host mongo:27017 --eval
      '
      db = (new Mongo("localhost:27017")).getDB("test");
      config = {
      "_id" : "dbrs",
      "members" : [
        {
          "_id" : 0,
          "host" : "catalogService-mongo:27017",
          "priority": 3
        }
      ]
      };
      rs.initiate(config);
      '
  app:
    container_name: catalogService
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: development.env
    environment:
      - MONGOOSE_URL=mongodb://mongo:27017,mongo1:27017,mongo2:27017/catalog?replicaSet=dbrs
      - REDIS_QUEUE_PORT=6379
      - REDIS_QUEUE_HOST=redis
      - PORT=7000
    ports:
      - 7000:7000
    depends_on:
      - mongo
      - redis
  redis:
    ports:
      - 6379:6379
    restart: always
    volumes:
      - ./data/redis:/data/redis
  zookeeper:
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - 2181:2181
  broker:
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT_DOCKER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT_DOCKER://broker:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_JMX_PORT=9101
      - KAFKA_JMX_HOSTNAME=localhost
      - KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS=broker:29092
      - CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS=1
      - CONFLUENT_METRICS_ENABLE=true
      - CONFLUENT_SUPPORT_CUSTOMER_ID=anonymous
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT_DOCKER
    ports:
      - 9092:9092
      - 9101:9101
  schema-registry:
    ports:
      - 8081:8081
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=broker:29092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
  connect:
    ports:
      - 8083:8083
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=broker:29092
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_GROUP_ID=compose-connect-group
      - CONNECT_CONFIG_STORAGE_TOPIC=docker-connect-configs
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_FLUSH_INTERVAL_MS=10000
      - CONNECT_OFFSET_STORAGE_TOPIC=docker-connect-offsets
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_TOPIC=docker-connect-status
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      - CLASSPATH=/usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.0.jar
      - CONNECT_PRODUCER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      - CONNECT_CONSUMER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      - CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/confluent-hub-components
      - CONNECT_LOG4J_LOGGERS=org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
  control-center:
    ports:
      - 9021:9021
    environment:
      - CONTROL_CENTER_BOOTSTRAP_SERVERS=broker:29092
      - CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER=connect:8083
      - CONTROL_CENTER_KSQL_KSQLDB1_URL=http://ksqldb-server:8088
      - CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL=http://localhost:8088
      - CONTROL_CENTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONTROL_CENTER_REPLICATION_FACTOR=1
      - CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS=1
      - CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS=1
      - CONFLUENT_METRICS_TOPIC_REPLICATION=1
      - PORT=9021
  ksqldb-server:
    ports:
      - 8088:8088
    environment:
      - KSQL_CONFIG_DIR=/etc/ksql
      - KSQL_BOOTSTRAP_SERVERS=broker:29092
      - KSQL_HOST_NAME=ksqldb-server
      - KSQL_LISTENERS=http://0.0.0.0:8088
      - KSQL_CACHE_MAX_BYTES_BUFFERING=0
      - KSQL_KSQL_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KSQL_PRODUCER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      - KSQL_CONSUMER_INTERCEPTOR_CLASSES=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      - KSQL_KSQL_CONNECT_URL=http://connect:8083
      - KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR=1
      - KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE=true
      - KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE=true
  ksqldb-cli:
    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    command: "bash -c 'echo Waiting for Kafka to be ready... && cub kafka-ready -b broker:29092 1 40 && echo Waiting for Confluent Schema Registry to be ready... && cub sr-ready schema-registry 8081 40 && echo Waiting a few seconds for topic creation to finish... && sleep 11 && tail -f /dev/null'"
    environment:
      - KSQL_CONFIG_DIR=/etc/ksql
      - STREAMS_BOOTSTRAP_SERVERS=broker:29092
      - STREAMS_SCHEMA_REGISTRY_HOST=schema-registry
      - STREAMS_SCHEMA_REGISTRY_PORT=8081

  rest-proxy:
    ports:
      - 8082:8082
    environment:
      - KAFKA_REST_HOST_NAME=rest-proxy
      - KAFKA_REST_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_REST_LISTENERS=http://0.0.0.0:8082
      - KAFKA_REST_SCHEMA_REGISTRY_URL=http://schema-registry:8081

  prometheus:
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - 9090:9090
    labels:
      org.label-schema.group: 'monitoring'

  nodeexporter:
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - 9100:9100
    labels:
      org.label-schema.group: 'monitoring'

  grafana:
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000
    labels:
      org.label-schema.group: 'monitoring'
  loki:
    ports:
      - '3100:3100'
    command:
      - --config.file=/mnt/config/loki.yaml
    volumes:
      - ./grafana/provisioning/loki.yaml:/mnt/config/loki.yaml:ro
  tempo:
    image: grafana/tempo:latest
    command: ['-config.file=/etc/tempo.yaml']
    volumes:
      - ./grafana/provisioning/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data/:/tmp/tempo
    ports:
      # - '14268:14268' # jaeger ingest
      - '3200:3200' # tempo
      - '4317:4317' # otlp grpc
      - '4318:4318' # otlp http
      - '9411:9411' # zipkin
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ['--config=/etc/otel-collector.yaml']
    volumes:
      - ./grafana/provisioning/otel-collector.yaml:/etc/otel-collector.yaml
  jaeger:
    ports:
      - '16686:16686'
      - '14268:14268'
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
